#!/bin/bash

cd $(dirname "$0")
config_dir="${PWD##$HOME/}"

SET_SHELL=ask
INSTALL_VIM_PLUGINS="yes"

for arg in "$@"; do
	case "$arg" in
		--keep-shell) SET_SHELL="no";;
		--set-shell) SET_SHELL="yes";;
		--skip-vim-plugins) INSTALL_VIM_PLUGINS="no";;
		*)
			printf "Unrecognized option/argument: %s\n" "$arg" >&2
			exit 1
	esac
done

# Check if the config_dir is relative to $HOME or not.
config_dir_prefix=""
[ "$config_dir" != "$PWD" ] && config_dir_prefix="../"

check_commands() {
	local missing=0
	for tool in "$@"; do
		if ! command -v "$tool" > /dev/null; then
			echo "$tool missing."
			missing=1
		fi
	done
	return $missing
}

config_backup_dir="backup-$(date +%F-%H-%M-%S)";

install_file() {
	if [ -e "$HOME/$2" ]; then
		if [ "$(readlink "$HOME/$2")" != "$config_dir/$1" ]; then
			mkdir -p "$config_backup_dir"
			mv "$HOME/$2" "$config_backup_dir/$1"
			echo "'$2' already exists. It is moved to '$config_dir/$config_backup_dir/$1'." 1>&2
		else
			return
		fi
	fi
	ln -s "$config_dir/$1" "$HOME/$2"
}

ask() {
	read -n 1 -r -p "$1 (y/N)"
	echo
	[[ $REPLY = "Y" || $REPLY = "y" ]]
}

# Check for required tools.
required_commands="git vim"
if ! check_commands $required_commands; then
	exit 1
fi

# Make a symlink to the config dir at $HOME/.config/config_dir
if [ ! -e "$HOME/.config" ]; then
	mkdir "$HOME/.config"
elif [ ! -d "$HOME/.config" ]; then
	echo "$HOME/.config exists and is not a directory." 1>&2
	exit 1
fi

if [ ! -e "$HOME/.config/nvim" ]; then
	ln -s config_dir/vim "$HOME/.config/nvim"
elif [ "$(readlink "$HOME/.config/nvim")" != "config_dir/vim" ]; then
	echo "$HOME/.config/nvim exists but is not a symlink to config_dir/vim" 1>&2
	exit 1
fi

if [ ! -e "$HOME/.config/config_dir" ]; then
	ln -s "$config_dir_prefix$config_dir" "$HOME/.config/config_dir"
elif [ "$(readlink "$HOME/.config/config_dir")" != "$config_dir_prefix$config_dir" ]; then
	echo "$HOME/.config/config_dir exists but is not the correct symlink. Please move or remove it." 1>&2
	exit 1
fi

# Throw away old .zprofile that we used to ship.
if [ "$(readlink "$HOME/.zprofile")" == "$config_dir/zprofile" ]; then
	rm "$HOME/.zprofile"
fi

# Install configuration files.
for file in bash_profile bashrc gitconfig profile screenrc vimrc zshrc vim zshenv Xresources tmux.conf
do
	install_file "$file" ".$file"
done

clone_or_update_vim_plugin() {
	plugin="$1"
	plugin_dir="${plugin##*/}"
	if [[ -d "$plugin_dir" ]]; then
		printf "Updating vim plugin %s\n" "$plugin"
		git -C "$plugin_dir" fetch -q
		git -C "$plugin_dir" reset -q --hard origin/HEAD
	else
		printf "Cloning vim plugin %s\n" "$plugin"
		git clone -q "https://github.com/$plugin"
	fi
}

# Install/update vim plugins.
vim_plugins=(
	'PeterRincker/vim-argumentative'
	'Shougo/vimproc.vim'
	'airblade/vim-gitgutter'
	'bkad/CamelCaseMotion'
	'easymotion/vim-easymotion'
	'godlygeek/tabular'
	'groenewege/vim-less'
	'junegunn/fzf.vim'
	'junegunn/vim-easy-align'
	'morhetz/gruvbox'
	'mg979/vim-visual-multi'
	'tpope/vim-commentary'
	'tpope/vim-fugitive'
	'tpope/vim-repeat'
	'tpope/vim-sleuth'
	'tpope/vim-speeddating'
	'tpope/vim-surround'
	'vim-scripts/Rename2'
	'vim-scripts/The-NERD-tree'
	'vim-scripts/VisIncr'
	'vim-scripts/vis'
	# File type / language support:
	'vim-scripts/JSON.vim'
	'vim-scripts/django.vim'
	'vim-scripts/glsl.vim'
	'vim-scripts/jade.vim'
	'vim-scripts/openscad.vim'
	'vim-pandoc/vim-pandoc-syntax'
	'cespare/vim-toml'
	'de-vri-es/vim-urscript'
	'eagletmt/neco-ghc'
	'guns/xterm-color-table.vim'
	'leafgarland/typescript-vim'
	'lukerandall/haskellmode-vim'
	'rust-lang/rust.vim'
)
(
	cd "vim/pack/config/start"
	# Clone or update plugins.
	for plugin in "${vim_plugins[@]}"; do
		clone_or_update_vim_plugin "$plugin" &
	done

	wait
	echo "All vim plugins up-to-date"

	# Remove plugins that are not in the list (anymore).
	for dir in *; do
		[[ ! -d "$dir" ]] && continue;
		delete=1
		for plugin in "${vim_plugins[@]}"; do
			plugin_dir="${plugin##*/}"
			if [[ "$dir" == "$plugin_dir" ]]; then
				delete=0;
				break;
			fi
		done
		if (( delete )); then
			printf "Removing vim plugin %s\n" "$dir"
			rm -rf "$dir"
		fi
	done
)

# Install zsh-syntax-highlighting.
if [ ! -d "zsh-syntax-highlighting" ]; then
	git clone git://github.com/zsh-users/zsh-syntax-highlighting
fi

if [[ "$SET_SHELL" != "no" ]]; then
	shell=$(getent passwd $LOGNAME | cut -d: -f7)
	case "$shell" in
		*/zsh) ;;
		*)
			zshell=$(grep '/zsh$' /etc/shells | head -n1)
			if [ -n "$zshell" ]; then
				if [[ "$SET_SHELL" == "ask" ]] && ask "Change shell to zsh?"; then
					chsh -s "$zshell"
				elif [[ "$SET_SHELL" == "yes" ]]; then
					chsh -s "$zshell"
				fi
			fi
			;;
	esac
fi

if ! command -v rg > /dev/null; then
	echo "Consider installing ripgrep"
fi

if ! command -v fzf > /dev/null; then
	echo "Consider installing fzf (fuzzy finding in zsh, bash, vim, etc.)"
fi

if ! command -v diff-so-fancy > /dev/null; then
	echo "Consider installing diff-so-fancy (prettier diff/patch outputs in git)"
fi

if ! command -v exa > /dev/null; then
	echo "Consider installing exa (a better ls)"
fi
